Neoloader September 2022 Private Beta
	Initial private beta
	
	API version 3
	patch level 0








Neoloader November 2022 Private Beta
	
	API changes:
		API version 3
		patch level 1
		
		NEW		lib.err_handle
		NEW 	lib.get_path
		NEW 	lib.open_config
		NEW 	lib.open_if_config
		CHANGED	lib.resolve_file
		CHANGED lib.build_ini
		CHANGED lib.get_state
		FIXES	lib.register
		FIXES	lib.set_class
		FIXES	lib.lock_class
		FIXES	lib.unlock_class
		FIXES	lib.plugin_read_str
	
	New Error Capture System
		Previous 'detected errors' (usually from faulty function input) returned false and an error string.
		This still occurs, but now there is an optional logging and dialog system trhough the API "lib.err_handle()"
		this affects ***__ALL__*** API functions
	
	new option: Do Error Popup
		Controls whether errors are presented to the user or only logged through the error capture system
	
	changed file resolving
		lib.resolve_file now accepts an optional second path argument
		lib.resolve_file no longer errors if no '/' is provided
	
	changed how plugins are loaded
		plugins distributed WITH other plugins may have variable folder structure; plugins now store their folder path during registry, and when activated, this path is attempted if all others fail (see changes to file resolving)
	
	changed how INI files are built into table objects
		fixed how dependencies are collected (used a negative iterator on accident)
		stores folder path of the INI file pointer provided
	
	fixed how plugins are registered
		Registry should be more robust to plugins with no provided version
			This is a bad practice to do, but won't crash Neoloader anymore
	
	changes to plugin activation
		fixes versionless activation to attempt the latest available like other API functions do
		activation now provides the plugin's INI folder path when resolving the plugin's file
		now logs where the activation system fails
	
	changes to plugin state retrieval
		Now includes the folder path
	
	changes to Neoloader global state retreival
		ifmgr now returns "vo-if" only if the current general interface manager doesn't exist; fixes issues where the current IF manager may check for itself being the active manager (as opposed to loaded but not active)
	
	fixed how plugins set their class
		Properly handles "version 0" as an attempt to set the latest version installed
			This is a bad practice to do, but won't crash Neoloader anymore
	
	fixed how plugins lock their class
		Properly handles "version 0" as an attempt to set the latest version installed
			This is a bad practice to do, but won't crash Neoloader anymore
		if a custom key isnt provided, now calls lib.generate_key (but doesn't store/return it, so consider that lock permanent!)
	
	fixed how plugins unlock their class
		Properly handles "version 0" as an attempt to set the latest version installed
			This is a bad practice to do, but won't crash Neoloader anymore
	
	fixed how plugins access their INIs
		converts header or key arguments to string, in case the provided value wasn't.
	
	New shortcut functions
		lib.get_path lets you retrieve a folder path without using lib.get_state and parsing the provided table
		lib.open_config will launch the currently active plugin management engine
		lib.open_if_config will launch the currently active interface management engine
	
	Overhauled the startup loader process
		there was no functional difference between a library and a plugin, and if a library were erroneously dependent on a plugin then it would never get loaded. Everything is (again) sorted into a single table for activation, ignoring classification.
		Added more logging
		now uses lib.resolve_file to launch the current interface management engine, if it exists (previously used a pcall setup)
		improved handling of plugins that don't have versioning information
			This is a bad practice, but will less likely cause crashes
		fixed a LOT of bugs related to forgetting which tables worked what way
	
	neomgr changes
		A plugin's public name now has a maximum visible length (1/5th of a user's screen)
		








Neoloader April 2023 Private Beta
	
	API Changes:
		API Version 3
		minor level 4
		patch level 0
		
		NEW		lib.reload
		NEW		lib.request_auth
		NEW		lib.get_whole_ver
		NEW		lib.compare_sem_ver
		FIXES	lib.activate_plugin
		FIXES	lib.err_handle
		CHANGED	lib.get_gstate
		CHANGED	lib.log_error
		
	41 total commits
	
	More error reporting
		lib.activate_plugin returns proper messaging, for instance, as well as making logs.
		
	Adjusted setup process
		Pilots can now choose to make new plugins loaded by default
		Option available in neoloader's setup phase, and in neomgr
		
	Fixed several minor issues with neomgr and reworked options
		update button for the log now works; log can be exported to syslog5000
		Neoloader access button in options dialog now moves appropriately for pilots not using AngularUI
		neomgr Options panel can scroll and fits screen better
		Fixed loss of flight control if neomgr was accessed in-flight
			could still be improved (check for Show/Hide/HideAllDialog valid)
		
	New reload function
		Due to certain "ghost" command issues, Neoloader was triggering errors when ReloadInterface() was triggered. While the issue may have been fixed on the game's end, this reload function was intended to safely catch these errors. It will remain implemented, and the /reload command will point to this function. It will also prevent reloads from being 'triggered' before the "START" event, where they would erroneously be ignored.
		
	Some functionality for managing plugins that don't expect Neoloader's presence
		Neoloader now has a brother utility, NeoPatcher, which can make (hopefully) ANY plugin manageable with the in-game interface! Changes were made to allow this through minimal patching; the actual code of a plugin won't have to change, just get rerouted through a check. See more in the documentation.
		
	Further improvements to Init
		calling plugins with version 0 should reroute to the latest installed version. In some places this wasn't handled appropriately, and should be fixed
		Any time a file is going to be accessed or expected, we now use gksys.IsExist to verify its... actually there. Who'da thunk?
			Neoloader can now complain if its missing files.
		
	plugins can now see the default load state in lib.get_gstate
	
	Implemented FORCE and added the AUTH load state
		FORCE load state will make a plugin in Neoloader launch even if dependencies aren't met. This should be used by plugin developers, not by end users.
		AUTH, on the other hand, is used for plugins that may want to use 'restricted' functions in Neoloader. Instead of using lib.request_auth every time the client launches, using this load state will give the auth key when the plugin is loaded.
		
	Implemented new auth request method
		before, only the management engine for Neoloader could use lib.activate_plugin and lib.uninstall. Now, any plugin can *request* the auth token through this function.
		
	A 'preload' file can now be used before Neoloader starts
		This is intended to be used for plugin developers who may need to trigger custom code for whatever project they're working on.
		lib.log_error will now send its output to the function this code returns, in case you're using some kind of custom logging system
		
	Neoloader now handles advanced version data
		Instead of directly comparing version numbers, we can use lib.get_whole_ver to break a version string into a table of version and metadata, and then use lib.compare_sem_ver to decide which between two are likely the greater version.
		While intended for Semantic Versioning, lib.compare_sem_ver can theoretically take a large number of version types. The only character that is restricted is the hyphen, which denotes the start of "metadata"
	
Neoloader April 2023 Public Beta
	
	Neoloader Changes:
		major: 5
		minor: 1
		patch: 2
		
		CHANGED	Init
		New config.ini [Neoloader] rPresortedList = "NO"
	
	API Changes:
		API Version 3
		minor level 5
		patch level 0
		
		NEW		lib.get_minor
		CHANGED	lib.get_gstate
		CHANGED lib.register
	
	fixed LME versioning to use Semantic
		Neoloader itself uses semantic versioning now; lib.get_minor replaces the old lib.get_patch, while lib.get_patch returns actual 'patch' value. lib.get_gstate will now return API/minor/patch levels
	
	Allow skipping of dependency sorting system
		This is disabled by default and will be disabled when a new plugin is registered, but if the user has externally sorted their config.ini's registration order, they can disabled the sorting process to speed up launch times. This will only provide benefit to users with heavy plugin dependency trees.
		
		This CANNOT be turned on through the config override file
	
	Clarification on lib.get_gstate's "version" table:
		This is not representative of the API for "Library Management Engines", but rather is a version specific to Neoloader, which implements the LME api. In effect, this value should be seen as inconsequential to any plugins designed for use of the LME structure. Hence why it is not synced with lib.get_API/minor/patch functions, and is a seperate value in lib.get_gstate.